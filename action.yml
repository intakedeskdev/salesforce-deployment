---
name: ITD Salesforce Metadata Deployment
description: Deployment script to build and deploy metadata to an specific
  Salesforce environment
author: csilva-intakedesk
branding:
  icon: terminal
  color: red
inputs:
  DRY_RUN:
    description: Enable or disable the Salesforce project deploy --dry-run flag.
      This will also add --verbose to the option list. If true, will execute as
      dry-run; otherwise false. Defaults to true.
    type: boolean
    default: true
  TEST_LEVEL:
    description: Salesforce project deploy --test-level parameter. Defaults to
      RunLocalTests.
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  TIMEOUT:
    description: Salesforce project deploy --wait flag value. Timeout in minutes for
      the command to complete and display results. Defaults to 30.
    type: number
    default: 30
  MANIFEST_SOURCE_DIRECTORY:
    description: Source files path for project manifest generation --source-dir
      flag. Defaults to force-app.
    type: string
    default: force-app
  MANIFEST_OUTPUT_DIRECTORY:
    description: Output directoryfor project manifest generation --output-dir flag.
      Defaults to manifest.
    type: string
    default: manifest
  PACKAGE_SOURCE_DIRECTORY:
    description: Salesforce project deploy --manifest file path flag. Defaults to
      manifest/package.xml
    type: string
    default: manifest/package.xml
  DELTA_SOURCE_DIRECTORY:
    description: Salesforce project deploy --manifest file path flag with the delta
      changes. Defaults to package/package.xml
    type: string
    default: package/package.xml
  DELTA_FROM_SOURCE:
    description: The from source that will be used on the sgd delta.
    type: string
    required: true
  DELTA_TO_SOURCE:
    description: The to source that will be used on the sgd delta.
    type: string
    required: true
  SF_AUTH_URL:
    description: The Salesforce Auth URL
    type: string
    required: true
  SF_AUTH_USERNAME:
    description: The Salesforce username for login. Salesforce project deploy `-o` flag.
    type: string
    required: true
runs:
  using: composite
  steps:
    - name: Readme
      shell: bash
      run: |
        echo "::debug:: Add here the number of times you changed this and it broke:"
        echo "::debug:: 25"
    - name: Printing Github Variables in debug mode
      shell: bash
      run: |
        echo "::debug:: CI : $CI"
        echo "::debug::GITHUB_WORKFLOW : $GITHUB_WORKFLOW"
        echo "::debug::GITHUB_RUN_ID : $GITHUB_RUN_ID"
        echo "::debug::GITHUB_RUN_NUMBER : $GITHUB_RUN_NUMBER"
        echo "::debug::GITHUB_ACTION : $GITHUB_ACTION"
        echo "::debug::GITHUB_ACTIONS : $GITHUB_ACTIONS"
        echo "::debug::GITHUB_ACTOR : $GITHUB_ACTOR"
        echo "::debug::GITHUB_REPOSITORY : $GITHUB_REPOSITORY"
        echo "::debug::GITHUB_EVENT_NAME : $GITHUB_EVENT_NAME"
        echo "::debug::GITHUB_EVENT_PATH : $GITHUB_EVENT_PATH"
        echo "::debug::GITHUB_WORKSPACE : $GITHUB_WORKSPACE"
        echo "::debug::GITHUB_SHA : $GITHUB_SHA"
        echo "::debug::GITHUB_REF : $GITHUB_REF"
        echo "::debug::GITHUB_HEAD_REF : $GITHUB_HEAD_REF"
        echo "::debug::GITHUB_BASE_REF : $GITHUB_BASE_REF"
        echo "::debug::GITHUB_SERVER_URL : $GITHUB_SERVER_URL"
        echo "::debug::GITHUB_API_URL : $GITHUB_API_URL"
        echo "::debug::GITHUB_GRAPHQL_URL : $GITHUB_GRAPHQL_URL"
        echo "::debug::BRANCH_NAME : ${{ github.event.pull_request.head.ref }}"
        echo "::debug::GITHUB_REF : $GITHUB_REF"
    - name: Installing Required system libraries
      shell: bash
      run: |
        # sudo apt-get update
        java --version
        # sudo apt install default-jdk
        sudo apt-get install xmlstarlet
        echo "::debug:: Node version before update"
        node -v
        echo "::debug:: NPM version before update"
        npm -v
        sudo npm install -g npm@latest
        sudo npm install -g n
        sudo n lts
        echo "::debug:: Node version after update"
        node -v
        echo "::debug:: NPM version after update"
        npm -v
    - name: Install Salesforce CLI
      shell: bash
      run: |
        # npm install -g @salesforce/cli@2.19.5
        npm install -g @salesforce/cli
        sf version --verbose --json
    - name: Installing SF Git Delta Plugin
      shell: bash
      run: |
        echo y | sf plugins install sfdx-git-delta
        sf plugins
    - name: Environment Login
      shell: bash
      run: >
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SF_AUTH_URL }}")
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Creating Delta packages for new, modified or deleted metadata
      shell: bash
      run: >
        echo "::debug::Command being executed: sf sgd source delta --from \"${{
        inputs.DELTA_FROM_SOURCE }}\" --to \"${{ inputs.DELTA_TO_SOURCE }}\"
        --output . --source ${{ inputs.MANIFEST_SOURCE_DIRECTORY }}/
        --generate-delta"

        sf sgd source delta --from "${{ inputs.DELTA_FROM_SOURCE }}" --to "${{ inputs.DELTA_TO_SOURCE }}" --output . --source ${{ inputs.MANIFEST_SOURCE_DIRECTORY }}/ --generate-delta
    - name: Determining Specified Tests
      shell: bash
      run: >
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          content=$(cat ${{ inputs.DELTA_SOURCE_DIRECTORY }})

          echo "::debug:: XML Content:"
          # echo "::debug:: $content"

          filtered_members=$(echo "$content" | xmlstarlet sel -N ns="http://soap.sforce.com/2006/04/metadata" \
              -t -m "//ns:types[ns:name='ApexClass']/ns:members[not(contains(., 'Test'))]" -v . -n)

          test_classes=()

          echo "::debug:: filtered_members Content:"
          # echo "$filtered_members"

          # Save each member into run-tests.txt with "Test" appended and quotes if there are spaces
          > run-tests.txt

          # Initialize a variable to hold the concatenated test classes
          deployFlagsConcatenated=""

          # Read each line from filtered_members and concatenate them into deployFlagsConcatenated
          while IFS= read -r member; do
              # Append "Test" to the member without quotes
              deployFlagsConcatenated+="${member}Test "
          done <<< "$filtered_members"

          # Remove the trailing comma and space from deployFlagsConcatenated
          deployFlagsConcatenated="${deployFlagsConcatenated%, }"

          # Save the concatenated test classes into run-tests.txt
          echo "$deployFlagsConcatenated" > run-tests.txt

          echo "::debug:: Contents of run-tests.txt:"
          # cat run-tests.txt
        fi
    - name: Environment Package(s) Deployment
      shell: bash
      run: >
        deployFlags=(
            --wait ${{ inputs.TIMEOUT }}
        )

        testRunContents=$(cat run-tests.txt);
        echo "::debug:: $testRunContents"

        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          classesToRun=$(cat "run-tests.txt")
          deployFlags+=( --dry-run )
          deployFlags+=( --verbose )
          
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )

          # deployFlags+=( --test-level RunSpecifiedTests )
          # deployFlags+=( --tests "$classesToRun" )          

          # while IFS= read -r line; do
          #     deployFlags+=("--tests $line")
          # done < "run-tests.txt"

        else
          deployFlags+=( --test-level ${{ inputs.TEST_LEVEL }} )
        fi

        if [ ! -z "${{ inputs.SF_AUTH_USERNAME }}" ]; then
          deployFlags+=( -o ${{ inputs.SF_AUTH_USERNAME }} )
        fi

        if [ -f ${{ inputs.DELTA_SOURCE_DIRECTORY }} ]; then
          echo "::debug::Deploying Package(s) Changes: ${{ inputs.DELTA_FROM_SOURCE }} to ${{ inputs.DELTA_TO_SOURCE }} @ $GITHUB_REPOSITORY"
          echo "::debug::Package Contents: $( cat ${{ inputs.DELTA_SOURCE_DIRECTORY }} )"

          deployFlags+=(
              --manifest ${{ inputs.DELTA_SOURCE_DIRECTORY }}
          )
        else
          echo "::debug::No changes to deploy between $GITHUB_BASE_REF and $GITHUB_HEAD_REF @ $GITHUB_REPOSITORY"
        fi

        if [ -f destructiveChanges/destructiveChanges.xml ]; then
          echo "::debug::Deploying Package(s) Destructive Changes: ${{ inputs.DELTA_FROM_SOURCE }} to ${{ inputs.DELTA_TO_SOURCE }} @ $GITHUB_REPOSITORY"
          echo "::debug::Package Contents: $( cat destructiveChanges/destructiveChanges.xml )"

          deployFlags+=(
              --post-destructive-changes destructiveChanges/destructiveChanges.xml
          )
        else
          echo "::debug::No Destructive changes to deploy between ${{ inputs.DELTA_FROM_SOURCE }} to ${{ inputs.DELTA_TO_SOURCE }} @ $GITHUB_REPOSITORY"
        fi

        echo "::debug::Command being executed: sf project deploy start ${deployFlags[@]}"

        sf project deploy start "${deployFlags[@]}"